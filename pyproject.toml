[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "toady-cli"
version = "0.1.0"
description = "A CLI tool for managing GitHub PR code reviews efficiently"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Tony Blank", email = "guillotine@lawnfucker.com"},
]
maintainers = [
    {name = "Tony Blank", email = "guillotine@lawnfucker.com"},
]
keywords = ["github", "cli", "code-review", "pull-request", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Software Development :: Quality Assurance",
    "Environment :: Console",
]
requires-python = ">=3.8"
dependencies = [
    "click>=8.1.0",
    "rich>=13.0.0",  # For pretty output formatting
    "typing-extensions>=4.0.0;python_version<'3.10'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pytest-timeout>=2.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-html>=3.2.0",
    "pytest-json-report>=1.5.0",
    "pytest-clarity>=1.0.1",
    "pytest-sugar>=0.9.7",
    "pytest-emoji>=0.2.0",
    "pytest-randomly>=3.12.0",
    "pytest-memorywatch>=0.6.0",
    "pytest-profiling>=1.7.0",
    "pytest-deadfixtures>=2.2.1",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "tox>=4.0.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    "tomli>=2.0.0;python_version<'3.11'",
    "coverage[toml]>=7.3.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pytest-timeout>=2.1.0",
]

[project.urls]
Homepage = "https://github.com/tonyblank/toady-cli"
Documentation = "https://github.com/tonyblank/toady-cli#readme"
Repository = "https://github.com/tonyblank/toady-cli.git"
"Bug Tracker" = "https://github.com/tonyblank/toady-cli/issues"

[project.scripts]
toady = "toady.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
toady = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = []
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001", "ARG002"]
"src/toady/cli.py" = ["ARG001"]  # Ignore unused arguments in CLI stubs

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--color=yes",
    "--tb=short",
    "--maxfail=1",
    "--durations=10",
    "--durations-min=1.0",
    "--cov=toady",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--cov-context=test",
    "-p", "no:warnings",
    "--disable-warnings",
]
testpaths = ["tests"]
pythonpath = ["src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*", "check_*"]
norecursedirs = [".git", ".tox", "dist", "build", "*.egg", "htmlcov", ".pytest_cache"]
markers = [
    "unit: Unit tests (fast, isolated, no external dependencies)",
    "integration: Integration tests (may require authentication or external services)",
    "slow: Slow running tests (>1s execution time)",
    "cli: CLI integration tests using CliRunner",
    "service: Service layer tests (GitHub API interactions, business logic)",
    "model: Model/data structure tests (serialization, validation)",
    "formatter: Output formatting tests (JSON, pretty print, tables)",
    "parser: Data parsing tests (GraphQL responses, API data)",
    "validator: Validation logic tests (input validation, error handling)",
    "smoke: Basic smoke tests for critical functionality",
    "regression: Regression tests for specific bug fixes",
    "parametrized: Parametrized tests with multiple input scenarios",
    "mock: Tests that heavily use mocking",
    "real_api: Tests that make actual API calls (requires auth)",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:pytest_mock.*",
    "error::pytest.PytestUnraisableExceptionWarning",
]
timeout = 300
timeout_method = "thread"
junit_family = "xunit2"
junit_logging = "all"
junit_log_passing_tests = false

[tool.coverage.run]
source = ["src/toady"]
branch = true
parallel = true
context = "${CONTEXT}"
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    "conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"
title = "Toady CLI Test Coverage Report"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38,py39,py310,py311,py312,lint,type

[testenv]
deps =
    pytest
    pytest-cov
    pytest-mock
commands =
    pytest {posargs}

[testenv:lint]
deps =
    black
    ruff
commands =
    black --check src tests
    ruff check src tests

[testenv:type]
deps =
    mypy
    types-click
commands =
    mypy src
"""
