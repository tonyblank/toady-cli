[tool:pytest]
# Test discovery patterns optimized for modular architecture
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_* check_*
norecursedirs = .git .tox dist build *.egg htmlcov .pytest_cache

# Advanced performance and output configuration
addopts =
    -ra
    --strict-markers
    --strict-config
    --tb=short
    --durations=10
    --durations-min=1.0
    --cov=toady
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    -p no:warnings
    --disable-warnings
    --color=yes

# Comprehensive test markers for organization and filtering
markers =
    unit: Unit tests (fast, isolated, no external dependencies)
    integration: Integration tests (may require authentication or external services)
    slow: Slow running tests (>1s execution time)
    cli: CLI integration tests using CliRunner
    service: Service layer tests (GitHub API interactions, business logic)
    model: Model/data structure tests (serialization, validation)
    formatter: Output formatting tests (JSON, pretty print, tables)
    parser: Data parsing tests (GraphQL responses, API data)
    validator: Validation logic tests (input validation, error handling)
    smoke: Basic smoke tests for critical functionality
    regression: Regression tests for specific bug fixes
    parametrized: Parametrized tests with multiple input scenarios
    mock: Tests that heavily use mocking
    real_api: Tests that make actual API calls (requires auth)
    auth: Authentication and authorization tests
    resilience: Network resilience and retry tests
    performance: Performance and load tests

# Enhanced filtering and collection rules
collect_ignore =
    build/
    dist/
    .tox/
    venv/
    .venv/
    env/
    .env/
    docs/_build/
    .eggs/
    *.egg-info/

collect_ignore_glob =
    **/.*
    **/__pycache__
    **/node_modules

# Performance and caching optimizations
cache_dir = .pytest_cache
python_paths = src
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:pytest_mock.*
    error::pytest.PytestUnraisableExceptionWarning

# Test execution controls
timeout = 300
timeout_method = thread
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = false

# Coverage configuration enhancements
[coverage:run]
source = src/toady
branch = true
parallel = true
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */site-packages/*
    */venv/*
    */env/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if False:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = true
skip_covered = false
precision = 2
sort = Cover

[coverage:html]
directory = htmlcov
title = Toady CLI Test Coverage Report

[coverage:xml]
output = coverage.xml
